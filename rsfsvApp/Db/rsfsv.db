#---------------------------------------------------------------------
# Title      : Rohde & Schwarz FSV Signal Analyzer Epics Protocol File
# Project    :
#---------------------------------------------------------------------
# File       : rsfsv.proto
# Author     : Vitor Finotti Ferreira  <vfinotti@finotti-Inspiron-7520>
# Company    : Brazilian Synchrotron Light Laboratory, LNLS/CNPEM
# Created    : 2016-04-05
# Last update: 2016-04-05
# Platform   :
# Standard   : Python 3.4
#---------------------------------------------------------------------
# Description:
#
# Defines protocol to use the device as a StreamDevice IOC in EPICS
#
#---------------------------------------------------------------------
# Copyright (c) 2016 Brazilian Synchrotron Light Laboratory, LNLS/CNPEM
#
# This program is free software: you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this program. If not, see
# <http://www.gnu.org/licenses/>.
#---------------------------------------------------------------------
# Revisions  :
# Date        Version  Author          Description
# 2016-apr-05 1.0      vfinotti        Created
#---------------------------------------------------------------------

######################################################################
# Reset to default state

record(bo, "$(P)$(R)GeneralReset-Cmd") {
  field(DESC, "Reset to default state")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsv.proto outRst $(PORT)")
}

######################################################################
# Get identification

record(stringin, "$(P)$(R)GeneralIdn-Cte") {
  field(DESC, "Get device identification")
  field(SCAN, "1 second")
  field(DTYP, "stream")
  field(INP, "@rsfsv.proto inIdn $(PORT)")
}

######################################################################
# Reference Level

record(ai, "$(P)$(R)GeneralRefLvl-RB") {
  field(DESC, "Get reference level")
  field(SCAN, "1 second")
  field(DTYP, "stream")
  field(PREC, "1")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(LINR, "NO CONVERSION")
  field(EGU, "dBm")
  field(INP, "@rsfsv.proto inRefLvl $(PORT)")
}

record(ao, "$(P)$(R)GeneralRefLvl-SP") {
  field(DESC, "Set reference level")
  field(DTYP, "stream")
  field(EGU, "dBm")
  field(OUT, "@rsfsv.proto outRefLvl($1) $(PORT)")
  field(FLNK,"$(P)$(R)GeneralRefLvl-RB")
}

######################################################################
# Reference Level Offset

record(ai, "$(P)$(R)GeneralRefOff-RB") {
  field(DESC, "Get reference level offset")
  field(SCAN, "1 second")
  field(DTYP, "stream")
  field(PREC, "1")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(LINR, "NO CONVERSION")
  field(EGU, "dBm")
  field(INP, "@rsfsv.proto inRefOff $(PORT)")
}

record(ao, "$(P)$(R)GeneralRefOff-SP") {
  field(DESC, "Set reference level offset")
  field(DTYP, "stream")
  field(EGU, "dBm")
  field(OUT, "@rsfsv.proto outRefOff($1) $(PORT)")
  field(FLNK,"$(P)$(R)GeneralRefOff-RB")
}

######################################################################
# Continuous Sweep State

record(bi, "$(P)$(R)GeneralSweMode-Sts") {
  field(DESC, "Get sweep mode (SINGLE|CONTINUOUS)")
  field(SCAN, "1 second")
  field(DTYP, "stream")
  field(ZNAM, "SINGLE")
  field(ONAM, "CONTINUOUS")
  field(INP, "@rsfsv.proto inSweMode $(PORT)")
}

record(bo, "$(P)$(R)GeneralSweMode-Sel") {
  field(DESC, "Set sweep mode (SINGLE|CONTINUOUS)")
  field(DTYP, "stream")
  field(ZNAM, "SINGLE")
  field(ONAM, "CONTINUOUS")
  field(OUT, "@rsfsv.proto outSweMode($1) $(PORT)")
  field(FLNK,"$(P)$(R)GeneralSweMode-Sts")
}

######################################################################
# Sweep Points Number

record(ai, "$(P)$(R)GeneralSwePoints-RB") {
  field(DESC, "Get number of points in one sweep")
  field(SCAN, "1 second")
  field(DTYP, "stream")
  field(PREC, "1")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(LINR, "NO CONVERSION")
  field(EGU, "points")
  field(INP, "@rsfsv.proto inSwePoints $(PORT)")
}

record(ao, "$(P)$(R)GeneralSwePoints-SP") {
  field(DESC, "Set number of points in one sweep")
  field(DTYP, "stream")
  field(EGU, "points")
  field(OUT, "@rsfsv.proto outSwePoints($1) $(PORT)")
  field(FLNK,"$(P)$(R)GeneralSwePoints-RB")
}

######################################################################
# Auto Adjust Center Frequency

record(bo, "$(P)$(R)GeneralAutoFreq-Cmd") {
  field(DESC, "Auto adjust center frequency")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsv.proto outAutoFreq($1) $(PORT)")
}

######################################################################
# Auto Adjust Reference Level

record(bo, "$(P)$(R)GeneralAutoLvl-Cmd") {
  field(DESC, "Auto adjust reference level")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsv.proto outAutoLvl($1) $(PORT)")
}

######################################################################
# Auto Adjust Frequency and Reference Level

record(bo, "$(P)$(R)GeneralAutoAll-Cmd") {
  field(DESC, "Auto adjust freq. and reference level")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsv.proto outAutoAll($1) $(PORT)")
}

######################################################################
# Read Trace

record(waveform, "$(P)$(R)GeneralTrace-RB") {
    field(DESC, "Get trace waveform")
    field(NELM, "32001")
    field(FTVL, "FLOAT")
    field(DTYP, "stream")
    field(SCAN, "1 second")
    field(INP,  "@rsfsv.proto inTrace $(PORT)")
}

######################################################################
# CENTER FREQUENCY

record(ai, "$(P)$(R)FreqCenter-RB") {
  field(DESC, "Get center frequency")
  field(SCAN, "1 second")
  field(DTYP, "stream")
  field(PREC, "1")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(LINR, "NO CONVERSION")
  field(EGU, "Hz")
  field(INP, "@rsfsv.proto inFrqCent $(PORT)")
}

record(ao, "$(P)$(R)FreqCenter-SP") {
  field(DESC, "Set center frequency")
  field(DTYP, "stream")
  field(EGU, "Hz")
  field(OUT, "@rsfsv.proto outFrqCent($1) $(PORT)")
  field(FLNK,"$(P)$(R)FreqCenter-RB")
}

######################################################################
# FREQUENCY SPAN

record(ai, "$(P)$(R)FreqSpan-RB") {
  field(DESC, "Get frequency span")
  field(SCAN, "1 second")
  field(DTYP, "stream")
  field(PREC, "1")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(LINR, "NO CONVERSION")
  field(EGU, "Hz")
  field(INP, "@rsfsv.proto inFrqSpan $(PORT)")
}

record(ao, "$(P)$(R)FreqSpan-SP") {
  field(DESC, "Set frequency span")
  field(DTYP, "stream")
  field(EGU, "Hz")
  field(OUT, "@rsfsv.proto outFrqSpan($1) $(PORT)")
  field(FLNK,"$(P)$(R)FreqSpan-RB")
}

######################################################################
# START FREQUENCY

record(ai, "$(P)$(R)FreqStart-RB") {
  field(DESC, "Get start frequency")
  field(SCAN, "1 second")
  field(DTYP, "stream")
  field(PREC, "1")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(LINR, "NO CONVERSION")
  field(EGU, "Hz")
  field(INP, "@rsfsv.proto inFrqStart $(PORT)")
}

record(ao, "$(P)$(R)FreqStart-SP") {
  field(DESC, "Set start frequency")
  field(DTYP, "stream")
  field(EGU, "Hz")
  field(OUT, "@rsfsv.proto outFrqStart($1) $(PORT)")
  field(FLNK,"$(P)$(R)FreqStart-RB")
}

######################################################################
# STOP FREQUENCY

record(ai, "$(P)$(R)FreqStop-RB") {
  field(DESC, "Get stop frequency")
  field(SCAN, "1 second")
  field(DTYP, "stream")
  field(PREC, "1")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(LINR, "NO CONVERSION")
  field(EGU, "Hz")
  field(INP, "@rsfsv.proto inFrqStop $(PORT)")
}

record(ao, "$(P)$(R)FreqStop-SP") {
  field(DESC, "Set stop frequency")
  field(DTYP, "stream")
  field(EGU, "Hz")
  field(OUT, "@rsfsv.proto outFrqStop($1) $(PORT)")
  field(FLNK,"$(P)$(R)FreqStop-RB")
}

######################################################################
# Get X Value of the Marker

record(ai, "$(P)$(R)MarkX-RB") {
  field(DESC, "Get X value of the marker")
  field(SCAN, "1 second")
  field(DTYP, "stream")
  field(PREC, "1")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(LINR, "NO CONVERSION")
  field(EGU, "seconds or Hz")
  field(INP, "@rsfsv.proto inMarkX $(PORT)")
}

record(ao, "$(P)$(R)MarkX-SP") {
  field(DESC, "Set X value of the marker")
  field(DTYP, "stream")
  field(EGU, "seconds or Hz")
  field(OUT, "@rsfsv.proto outMarkX($1) $(PORT)")
  field(FLNK,"$(P)$(R)MarkX-RB")
}

######################################################################
# Get Y Value of the Marker

record(ai, "$(P)$(R)MarkY-RB") {
  field(DESC, "Get Y value of the marker")
  field(SCAN, "1 second")
  field(DTYP, "stream")
  field(PREC, "1")
  field(MDEL, "-1")
  field(ADEL, "-1")
  field(LINR, "NO CONVERSION")
  field(EGU, "dBm")
  field(INP, "@rsfsv.proto inMarkY $(PORT)")
}

######################################################################
# Set Marker to Max Peak on Trace

record(bo, "$(P)$(R)MarkFindMax-Cmd") {
  field(DESC, "Set marker to max peak on trace")
  field(DTYP, "stream")
  field(ZNAM, "0")
  field(ONAM, "1")
  field(HIGH, "1")
  field(OUT, "@rsfsv.proto outMarkMax($1) $(PORT)")
}

######################################################################
# Save
# Desc: Save '-Sel' and '-SP' PV values.

record(bo, "$(P)$(R)Save-Cmd"){
  field(DESC, "Save PV values cmd")
  field(ZNAM, "OFF")
  field(ONAM, "ON")
  field(HIGH, "1")
  field(FLNK, "$(P)$(R)SaveTrg")
}

# This PV is monitored by autosave
record(calc, "$(P)$(R)SaveTrg"){
  field(ASG, "Reserved")
  field(DESC, "Save PV values trigger")
  field(INPA, "$(P)$(R)Save-Cmd.VAL")
  field(CALC, "A=1?!VAL:VAL")
  field(VAL, "0")
}

